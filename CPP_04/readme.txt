O **M√≥dulo 04 de C++** que est√°s a estudar √© focado principalmente em **polimorfismo**, 
**classes abstratas** e **interfaces**, tr√™s conceitos fundamentais da **Programa√ß√£o Orientada a 
Objetos (POO)**. Aqui vai um resumo do que cada exerc√≠cio prop√µe e o que ir√°s aprender com ele:

---

### ‚úÖ **Exerc√≠cio 00: Polimorfismo**

**Objetivo:**
Entender o conceito de **polimorfismo em tempo de execu√ß√£o** usando heran√ßa e fun√ß√µes virtuais.

**Atividades:**

* Criar uma classe base `Animal` com um atributo `type` e um m√©todo virtual `makeSound()`.
* Criar classes derivadas `Dog` e `Cat` que implementam `makeSound()` de forma espec√≠fica.
* Criar uma classe `WrongAnimal` e `WrongCat` para mostrar o que acontece quando *n√£o* usamos 
fun√ß√µes virtuais corretamente.

**O que voc√™ aprende:**

* Como o polimorfismo funciona em C++ com ponteiros para classes base.
* A import√¢ncia de fun√ß√µes virtuais.
* O risco de omitir `virtual` e as consequ√™ncias disso.

---

### ‚úÖ **Exerc√≠cio 01: I don‚Äôt want to set the world on fire**

**Objetivo:**
Aplicar **aloca√ß√£o din√¢mica de mem√≥ria** e **regra dos tr√™s** (construtor de c√≥pia, operador de 
atribui√ß√£o, destrutor).

**Atividades:**

* Criar uma classe `Brain` com 100 ideias (`std::string ideas[100]`).
* Adicionar um `Brain*` como atributo em `Dog` e `Cat`.
* Implementar c√≥pias profundas em `Dog` e `Cat`.
* Testar o gerenciamento correto da mem√≥ria e evitar *memory leaks*.

**O que voc√™ aprende:**

* A import√¢ncia do **gerenciamento de mem√≥ria manual** em C++.
* Como implementar **c√≥pia profunda**.
* Utilizar `delete` corretamente e evitar vazamentos de mem√≥ria.
* Princ√≠pios do **Ortodoxy Canonical Form** em C++.

---

### ‚úÖ **Exerc√≠cio 02: Classe Abstrata**

**Objetivo:**
For√ßar o uso de **classes abstratas** com m√©todos puramente virtuais.

**Atividades:**

* Transformar `Animal` em uma classe abstrata, impedindo sua instancia√ß√£o direta.

**O que voc√™ aprende:**

* Como declarar **m√©todos virtuais puros** (`= 0`).
* Por que usar classes abstratas para evitar instanciar objetos gen√©ricos.
* Design de hierarquias mais seguras e claras.

---

### üéØ **O que voc√™ vai dominar ao final do m√≥dulo:**

* O uso correto de **polimorfismo com fun√ß√µes virtuais**.
* A cria√ß√£o e uso de **classes abstratas e interfaces**.
* Implementa√ß√£o correta de **construtores, destrutores e c√≥pias profundas**.
* Conceitos de **encapsulamento e separa√ß√£o de responsabilidades**.
* **Gerenciamento de mem√≥ria manual**, evitando *memory leaks*.
* **Design orientado a objetos**, com foco na reutiliza√ß√£o e extensibilidade do c√≥digo.

Se quiser, posso te ajudar a come√ßar o esqueleto de cada exerc√≠cio! Deseja isso?
