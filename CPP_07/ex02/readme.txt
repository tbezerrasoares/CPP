## üß© **Resumo da atividade ex02 ‚Äî `Array<T>`**
### üéØ **Objetivo**
Criar uma **classe template `Array<T>`** com comportamento semelhante a um array:
* Gen√©rica (funciona com qualquer tipo)
* Segura (verifica acesso fora dos limites)
* Copi√°vel corretamente (deep copy)
* Gerencia mem√≥ria dinamicamente

## üìÑ **Especifica√ß√µes obrigat√≥rias**
### A classe `Array<T>` deve:

1. **Ter um construtor padr√£o**
   * Cria um array vazio, sem elementos.
2. **Ter um construtor com par√¢metro `unsigned int n`**
   * Cria um array com `n` elementos, **inicializados por default**.
   > üí° Dica: `new T[n]()` inicializa todos os elementos com o construtor padr√£o de `T`.
3. **Implementar construtor de c√≥pia e operador de atribui√ß√£o**
   * Modificar uma c√≥pia **n√£o afeta** o original. (**deep copy**).
4. **Implementar o operador `[]`**
   * Permite acessar/modificar elementos por √≠ndice.
   * Se o √≠ndice for **inv√°lido**, lan√ßar uma exce√ß√£o.
5. **Implementar `size()`**
   * Retorna o n√∫mero de elementos.
   * Deve ser `const` e n√£o modificar o objeto.
6. **Gerenciar a mem√≥ria com `new[]` e `delete[]`**
   * **Sem leaks** e sem acessar mem√≥ria n√£o alocada.

## üß† **Compet√™ncias desenvolvidas**

| Habilidade               | Aplica√ß√£o na ex02                                   |
| ------------------------ | --------------------------------------------------- |
| Templates de classe      | `template <typename T> class Array`                 |
| Aloca√ß√£o din√¢mica segura | `new[]`, `delete[]`, sem leaks                      |
| Operador `[]`            | Implementar com verifica√ß√£o de limites              |
| Exce√ß√µes                 | Lan√ßar `std::exception` ao acessar √≠ndice inv√°lido  |
| Deep copy                | C√≥pia segura no construtor e operador de atribui√ß√£o |
| Canonical Form           | Implementar forma can√¥nica: ctor, copy, dtor, `=`   |

## ‚ö†Ô∏è Regras importantes

| Regra                                   | Significado                                                |
| --------------------------------------- | ---------------------------------------------------------- |
| Proibido `std::vector`, `std::list` etc | Nada de containers STL (somente no m√≥dulo 08+)             |
| `new[]` obrigat√≥rio                     | N√£o pode usar `malloc` nem `std::allocator`                |
| Proibido acessar mem√≥ria n√£o alocada    | S√≥ use o que voc√™ mesmo alocou                             |
| Opera√ß√µes fora do `Array`               | Devem lan√ßar `std::exception`                              |
| Templates no `.cpp` = erro              | Tudo precisa estar em `.hpp` (ou `.tpp` incluso no `.hpp`) |

