# üî• **Exerc√≠cio 02 - Mutated Abomination**

## üéØ **Objetivo da Atividade**

O **Ex02 - Mutated Abomination** √© o exerc√≠cio mais desafiador do m√≥dulo CPP08. O objetivo √© criar uma classe `MutantStack` que herda de `std::stack` mas adiciona funcionalidade de **itera√ß√£o**, algo que a stack original n√£o possui. Este exerc√≠cio combina heran√ßa, adaptadores de containers e implementa√ß√£o de iteradores customizados.

### **Problema a Resolver:**
- `std::stack` √© um **container adapter** que n√£o fornece iteradores
- Precisamos manter toda a funcionalidade de stack (LIFO - Last In, First Out)
- Mas tamb√©m permitir itera√ß√£o pelos elementos armazenados
- A solu√ß√£o deve ser **template** para funcionar com qualquer tipo de dados

---

## üß† **Pontos de Aprendizado Fundamentais**

### ‚úÖ **1. Container Adapters e Heran√ßa**
- **Conceito**: Como `std::stack` funciona como wrapper sobre outros containers
- **Implementa√ß√£o**: Herdar de `std::stack` mantendo toda sua funcionalidade
- **Desafio**: Adicionar recursos sem quebrar a interface original

### ‚úÖ **2. Implementa√ß√£o de Iteradores**
- **Iterator**: Implementar `begin()` e `end()` para percorrer elementos
- **Const Iterator**: Vers√µes const dos iteradores para containers imut√°veis
- **Compatibilidade STL**: Iteradores compat√≠veis com algoritmos da STL

### ‚úÖ **3. Template Classes**
- **Genericidade**: Classe template que funciona com qualquer tipo `T`
- **Container Subjacente**: Permitir escolha do container base (vector, deque, list)
- **Type Traits**: Uso correto de tipos derivados do container base

### ‚úÖ **4. Orthodox Canonical Form para Templates**
- **Construtores**: Padr√£o, c√≥pia, e parametrizados
- **Operadores**: Atribui√ß√£o funcionando corretamente com templates
- **Destrutor**: Gest√£o autom√°tica via heran√ßa

### ‚úÖ **5. Acesso ao Container Subjacente**
- **Problema**: `std::stack` n√£o exp√µe seu container interno
- **Solu√ß√£o**: Usar `protected` member `c` ou criar acesso customizado
- **Seguran√ßa**: Manter encapsulamento enquanto permite itera√ß√£o

---

## üèóÔ∏è **Arquitetura da Implementa√ß√£o**

### **Estrutura da Classe:**
```cpp
template <typename T, typename Container = std::deque<T>>
class MutantStack : public std::stack<T, Container>
{
public:
    // Tipos de iterador
    typedef typename Container::iterator iterator;
    typedef typename Container::const_iterator const_iterator;
    typedef typename Container::reverse_iterator reverse_iterator;
    typedef typename Container::const_reverse_iterator const_reverse_iterator;

    // Orthodox Canonical Form
    MutantStack();
    MutantStack(const MutantStack &other);
    MutantStack &operator=(const MutantStack &other);
    ~MutantStack();

    // M√©todos de itera√ß√£o
    iterator begin();
    iterator end();
    const_iterator begin() const;
    const_iterator end() const;
    
    // Itera√ß√£o reversa (opcional)
    reverse_iterator rbegin();
    reverse_iterator rend();
    const_reverse_iterator rbegin() const;
    const_reverse_iterator rend() const;
};
```

### **Desafios T√©cnicos:**
1. **Acesso ao Container**: `std::stack` protege seu container interno
2. **Heran√ßa de Template**: Sintaxe correta para herdar de template especializado
3. **Type Definitions**: Definir tipos de iterador corretamente
4. **Compatibilidade**: Manter 100% compatibilidade com `std::stack`

---

## üß™ **Testes Implementados**

### **Teste 1: Funcionalidade Stack B√°sica**
```cpp
void testBasicStackFunctionality()
```
- **Objetivo**: Verificar que todas as opera√ß√µes de stack funcionam
- **Opera√ß√µes testadas**:
  - `push()`: Adicionar elementos
  - `pop()`: Remover elementos (sem retorno)
  - `top()`: Acessar topo
  - `empty()`: Verificar se est√° vazia
  - `size()`: Obter tamanho
- **Verifica√ß√£o**: Comportamento LIFO mantido
- **Aprendizado**: Heran√ßa preserva funcionalidade da classe base

### **Teste 2: Itera√ß√£o Forward**
```cpp
void testForwardIteration()
```
- **Cen√°rio**: Stack com elementos [1, 2, 3, 4, 5] (5 no topo)
- **Itera√ß√£o**: De `begin()` at√© `end()`
- **Ordem esperada**: [1, 2, 3, 4, 5] (bottom to top)
- **Verifica√ß√µes**:
  - Iteradores `begin()` e `end()` funcionam
  - Ordem de itera√ß√£o correta
  - Compatibilidade com range-based for
- **Aprendizado**: Como iteradores exp√µem estrutura interna

### **Teste 3: Itera√ß√£o Const**
```cpp
void testConstIteration()
```
- **Cen√°rio**: MutantStack const
- **Verifica√ß√µes**:
  - `const_iterator` funciona corretamente
  - N√£o permite modifica√ß√£o via iterador
  - M√©todos const retornam const_iterator
- **Aprendizado**: Import√¢ncia de const-correctness

### **Teste 4: Itera√ß√£o Reversa**
```cpp
void testReverseIteration()
```
- **Cen√°rio**: Mesma stack do teste 2
- **Itera√ß√£o**: De `rbegin()` at√© `rend()`
- **Ordem esperada**: [5, 4, 3, 2, 1] (top to bottom)
- **Verifica√ß√µes**:
  - Reverse iterators funcionam
  - Ordem reversa correta
  - Useful para algoritmos que precisam de ordem LIFO
- **Aprendizado**: Flexibilidade de diferentes tipos de itera√ß√£o

### **Teste 5: Algoritmos STL**
```cpp
void testSTLAlgorithms()
```
- **Algoritmos testados**:
  - `std::find()`: Buscar elemento espec√≠fico
  - `std::count()`: Contar ocorr√™ncias
  - `std::for_each()`: Aplicar fun√ß√£o a todos elementos
  - `std::accumulate()`: Somar todos elementos
- **Objetivo**: Verificar compatibilidade total com STL
- **Aprendizado**: Poder dos iteradores para integra√ß√£o com STL

### **Teste 6: Diferentes Container Types**
```cpp
void testDifferentContainers()
```
- **Containers testados**:
  - `MutantStack<int, std::vector<int>>`
  - `MutantStack<int, std::deque<int>>` (padr√£o)
  - `MutantStack<int, std::list<int>>`
- **Verifica√ß√µes**:
  - Template funciona com diferentes containers base
  - Performance e comportamento adequados
  - Flexibilidade da implementa√ß√£o
- **Aprendizado**: Poder dos templates para genericidade

### **Teste 7: Copy e Assignment**
```cpp
void testCopyAndAssignment()
```
- **Cen√°rios**:
  - Construtor de c√≥pia: `MutantStack<int> copy(original)`
  - Operador de atribui√ß√£o: `assigned = original`
- **Verifica√ß√µes**:
  - C√≥pia profunda de todos elementos
  - Independ√™ncia entre objetos
  - Iteradores funcionam em c√≥pias
- **Aprendizado**: Orthodox Canonical Form em templates

### **Teste 8: Large Dataset e Performance**
```cpp
void testPerformance()
```
- **Escala**: 100.000 elementos
- **Opera√ß√µes**:
  - Push massivo
  - Itera√ß√£o completa
  - Algoritmos STL em grande escala
- **Verifica√ß√µes**:
  - Performance adequada
  - Sem vazamentos de mem√≥ria
  - Estabilidade com big data
- **Aprendizado**: Import√¢ncia de testes de escala

### **Teste 9: Edge Cases**
```cpp
void testEdgeCases()
```
- **Casos testados**:
  - Stack vazia: iteradores `begin() == end()`
  - Stack com um elemento
  - Push/pop durante itera√ß√£o (undefined behavior)
  - Diferentes tipos de dados (string, custom objects)
- **Objetivo**: Garantir robustez em situa√ß√µes extremas
- **Aprendizado**: Import√¢ncia de considerar todos os cen√°rios

---

## üîß **Detalhes de Implementa√ß√£o**

### **Acesso ao Container Subjacente:**
```cpp
// std::stack tem um membro protected 'c' que √© o container
// Podemos acess√°-lo via heran√ßa:
iterator begin() { return this->c.begin(); }
iterator end() { return this->c.end(); }
```

### **Template Specialization:**
```cpp
// Container padr√£o √© std::deque (mesmo que std::stack)
template <typename T, typename Container = std::deque<T>>
class MutantStack : public std::stack<T, Container>
```

### **Type Safety:**
```cpp
// Garantir que Container suporta opera√ß√µes necess√°rias
static_assert(std::is_same<T, typename Container::value_type>::value,
              "Container value_type must match T");
```

---

## üìã **Arquivos do Projeto**

- **`MutantStack.hpp`**: Declara√ß√£o da classe template e implementa√ß√£o inline
- **`main.cpp`**: Suite completa de testes cobrindo todos os cen√°rios
- **`Makefile`**: Compila√ß√£o com flags apropriadas (-std=c++98)

---

## üéØ **Resultado Esperado**

Ap√≥s completar este exerc√≠cio, voc√™ ter√°:
1. ‚úÖ Dom√≠nio completo de heran√ßa com templates
2. ‚úÖ Experi√™ncia pr√°tica implementando iteradores
3. ‚úÖ Conhecimento profundo sobre container adapters
4. ‚úÖ Habilidade de estender funcionalidade de classes STL
5. ‚úÖ Compreens√£o de design patterns (Adapter/Wrapper)
6. ‚úÖ Experi√™ncia com compatibilidade total STL

Este √© o exerc√≠cio mais avan√ßado do m√≥dulo e prepara voc√™ para trabalhar com bibliotecas complexas e implementar estruturas de dados customizadas mantendo compatibilidade com padr√µes existentes.

---

## ‚ö†Ô∏è **Considera√ß√µes Importantes**

- **C++98 Compliance**: Usar sintaxe compat√≠vel (sem auto, range-based for em implementa√ß√£o)
- **Container Requirements**: Nem todos containers funcionam com stack (ex: std::forward_list)
- **Iterator Invalidation**: Modificar stack durante itera√ß√£o pode invalidar iteradores
- **Performance**: Itera√ß√£o em stack quebra o conceito de acesso apenas ao topo
- **Thread Safety**: N√£o implementado - usar com cuidado em ambientes multi-thread