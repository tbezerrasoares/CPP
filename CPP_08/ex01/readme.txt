# üìä **Exerc√≠cio 01 - Span**

## üéØ **Objetivo da Atividade**

O **Ex01 - Span** √© um exerc√≠cio intermedi√°rio do m√≥dulo CPP08 que visa consolidar conhecimentos sobre **STL containers**, **algoritmos**, **iteradores** e **tratamento de exce√ß√µes**. O objetivo √© criar uma classe `Span` que funciona como um **container inteligente com capacidade limitada** para armazenar inteiros e calcular estat√≠sticas sobre as diferen√ßas entre eles.

### **Funcionalidades Principais:**
1. **Armazenamento controlado**: Armazena no m√°ximo **N inteiros**, onde N √© definido no construtor
2. **C√°lculo de spans**: 
   - `shortestSpan()` ‚Üí menor diferen√ßa entre quaisquer dois n√∫meros
   - `longestSpan()` ‚Üí maior diferen√ßa entre quaisquer dois n√∫meros
3. **Inser√ß√£o eficiente**: Permite inserir ranges completos usando iteradores
4. **Tratamento robusto de erros**: Lan√ßa exce√ß√µes espec√≠ficas para cada tipo de erro

---

## üß† **Pontos de Aprendizado Fundamentais**

### ‚úÖ **1. Controle de Capacidade e Gest√£o de Mem√≥ria**
- **Objetivo**: Aprender a criar containers com limite fixo de elementos
- **Conceitos**: Verifica√ß√£o de bounds, preven√ß√£o de overflow, uso eficiente de `std::vector`
- **Aplica√ß√£o pr√°tica**: Sistemas com recursos limitados, buffers de tamanho fixo

### ‚úÖ **2. Algoritmos STL Avan√ßados**
- **`std::sort`**: Para ordena√ß√£o eficiente antes de calcular shortest span
- **`std::min_element` e `std::max_element`**: Para encontrar extremos em O(n)
- **`std::distance`**: Para calcular tamanho de ranges de iteradores
- **Vantagem**: Usar algoritmos otimizados em vez de loops manuais

### ‚úÖ **3. Template Methods e Iteradores Gen√©ricos**
- **Conceito**: Criar m√©todos que funcionam com qualquer tipo de iterador
- **Implementa√ß√£o**: `addRange(Iterator begin, Iterator end)`
- **Flexibilidade**: Funciona com `std::vector`, `std::list`, arrays C++, etc.
- **Aprendizado**: Como criar APIs gen√©ricas e reutiliz√°veis

### ‚úÖ **4. Sistema de Exce√ß√µes Customizadas**
- **Hierarquia**: Tr√™s tipos espec√≠ficos de exce√ß√µes
  - `SpanFullException`: Container cheio
  - `NotEnoughElementsException`: Poucos elementos para c√°lculo
  - `RangeTooBigException`: Range maior que capacidade
- **Benef√≠cio**: Tratamento granular de erros e debugging facilitado

### ‚úÖ **5. Orthodox Canonical Form**
- **Implementa√ß√£o completa**: Todos os construtores, destrutor e operadores
- **Gest√£o de recursos**: C√≥pia profunda vs shallow copy
- **Boas pr√°ticas**: RAII (Resource Acquisition Is Initialization)

### ‚úÖ **6. An√°lise de Complexidade Algor√≠tmica**
- **shortestSpan()**: O(n log n) devido √† ordena√ß√£o
- **longestSpan()**: O(n) usando min/max
- **addRange()**: O(k) onde k √© o tamanho do range
- **Otimiza√ß√£o**: Escolha do algoritmo correto para cada opera√ß√£o

---

## üß™ **Explica√ß√£o dos Testes Implementados**

### **Teste 1: Funcionalidade B√°sica**
```cpp
void testBasicFunctionality()
```
- **Objetivo**: Verificar opera√ß√µes fundamentais da classe
- **Cen√°rio**: Adiciona 5 n√∫meros (6, 3, 17, 9, 11) em um Span de capacidade 5
- **Verifica√ß√µes**:
  - Adi√ß√£o bem-sucedida de n√∫meros
  - C√°lculo correto do shortest span (diferen√ßa m√≠nima = 2)
  - C√°lculo correto do longest span (diferen√ßa m√°xima = 14)
- **Aprendizado**: Funcionamento b√°sico da classe e c√°lculos corretos

### **Teste 2: Teste de Exce√ß√µes**
```cpp
void testExceptions()
```
- **Cen√°rios testados**:
  1. **Container cheio**: Tenta adicionar al√©m da capacidade
  2. **Elementos insuficientes**: Calcula span com apenas 1 elemento
  3. **Container vazio**: Calcula span sem elementos
- **Objetivo**: Verificar se todas as exce√ß√µes s√£o lan√ßadas corretamente
- **Aprendizado**: Import√¢ncia do tratamento robusto de casos extremos

### **Teste 3: Inser√ß√£o de Range**
```cpp
void testRangeInsertion()
```
- **Cen√°rio 1**: Adiciona range de vector com 10 elementos (10, 20, 30...100)
- **Cen√°rio 2**: Tenta adicionar range maior que a capacidade restante
- **Verifica√ß√µes**:
  - Inser√ß√£o eficiente de m√∫ltiplos elementos
  - C√°lculos corretos ap√≥s inser√ß√£o em massa
  - Exce√ß√£o para range muito grande
- **Aprendizado**: Uso de iteradores e templates para opera√ß√µes em lote

### **Teste 4: Dataset Grande (Performance)**
```cpp
void testLargeDataset()
```
- **Escala**: 20.000 n√∫meros aleat√≥rios
- **Objetivo**: Verificar performance com grandes volumes de dados
- **Verifica√ß√µes**:
  - Inser√ß√£o r√°pida usando `addRange()`
  - C√°lculos eficientes mesmo com muitos elementos
  - Estabilidade da aplica√ß√£o com big data
- **Aprendizado**: Import√¢ncia da escolha de algoritmos eficientes

### **Teste 5: C√≥pia e Atribui√ß√£o**
```cpp
void testCopyAndAssignment()
```
- **Cen√°rios**:
  - Construtor de c√≥pia: `Span copy(original)`
  - Operador de atribui√ß√£o: `assigned = original`
- **Verifica√ß√µes**:
  - C√≥pia correta de dados
  - Independ√™ncia entre objetos originais e copiados
  - Funcionamento id√™ntico ap√≥s c√≥pia
- **Aprendizado**: Implementa√ß√£o correta do Orthodox Canonical Form

### **Teste 6: Casos Extremos**
```cpp
void testEdgeCases()
```
- **Cen√°rios especiais**:
  1. **N√∫meros negativos e positivos**: Mistura valores negativos, zero e positivos
  2. **N√∫meros duplicados**: Todos os elementos iguais (span = 0)
- **Verifica√ß√µes**:
  - Funcionamento correto com valores negativos
  - C√°lculo correto quando n√£o h√° diferen√ßa (span = 0)
  - Robustez em situa√ß√µes n√£o convencionais
- **Aprendizado**: Import√¢ncia de testar edge cases para garantir robustez

---

## üìã **Arquivos do Projeto**

- **`Span.hpp`**: Declara√ß√£o da classe, templates e exce√ß√µes
- **`Span.cpp`**: Implementa√ß√£o de todos os m√©todos
- **`main.cpp`**: Suite completa de testes cobrindo todos os cen√°rios
- **`Makefile`**: Compila√ß√£o com flags apropriadas (-std=c++98)

---

## üéØ **Resultado Esperado**

Ap√≥s completar este exerc√≠cio, voc√™ ter√°:
1. ‚úÖ Dom√≠nio completo de containers STL e algoritmos
2. ‚úÖ Experi√™ncia pr√°tica com templates e iteradores gen√©ricos
3. ‚úÖ Conhecimento s√≥lido sobre tratamento de exce√ß√µes
4. ‚úÖ Habilidade de criar classes robustas seguindo boas pr√°ticas
5. ‚úÖ Compreens√£o de an√°lise de complexidade algor√≠tmica
6. ‚úÖ Experi√™ncia com testes abrangentes e edge cases

Este exerc√≠cio prepara voc√™ para trabalhar com estruturas de dados mais complexas e sistemas que requerem alta performance e confiabilidade.


