## üéØ **Objetivos das Atividades**

O M√≥dulo 08 tem como foco o uso de **containers, iteradores e algoritmos da STL (Standard Template Library)** do C++. O objetivo √© fazer com que voc√™:

- Aprenda a utilizar **templates** e **containers gen√©ricos**.
- Explore **iteradores** para percorrer estruturas de dados.
- Aplique **algoritmos da STL** para manipula√ß√£o eficiente de dados.
- Desenvolva c√≥digo limpo, modular e conforme o padr√£o **C++98**.

---

## üß† **Principais Conceitos Desenvolvidos**

### ‚úÖ **Uso de STL Containers e Algoritmos**
- Voc√™ ser√° incentivado a usar containers como `vector`, `list`, `map`, etc.
- Tamb√©m usar√° algoritmos do `<algorithm>` como `find`, `sort`, `min_element`, etc.

### ‚úÖ **Templates e Fun√ß√µes Gen√©ricas**
- Aprender√° a criar fun√ß√µes e classes que funcionam com diferentes tipos de dados usando **templates**.

### ‚úÖ **Iteradores**
- Vai entender como iteradores funcionam e como us√°-los para percorrer containers.
- No exerc√≠cio final, voc√™ criar√° uma vers√£o iter√°vel da `std::stack`, que normalmente n√£o possui iteradores.

### ‚úÖ **Tratamento de Exce√ß√µes**
- Aprender√° a lan√ßar e capturar exce√ß√µes para lidar com erros como limites de containers ou buscas sem sucesso.

### ‚úÖ **Design de Classes**
- As classes devem seguir o **Orthodox Canonical Form** (construtor padr√£o, c√≥pia, destrutor, operador de atribui√ß√£o).
- Pr√°tica com encapsulamento, modularidade e boas pr√°ticas de projeto.

---

## üìö **Resumo das Atividades**

| Exerc√≠cio | Nome                  | Objetivo Principal                                                                 |
|-----------|-----------------------|-------------------------------------------------------------------------------------|
| ex00      | Easy find             | Criar uma fun√ß√£o template que busca um valor inteiro em um container gen√©rico.     |
| ex01      | Span                  | Criar uma classe que armazena inteiros e calcula a menor e maior diferen√ßa entre eles. |
| ex02      | Mutated abomination   | Criar uma classe baseada em `std::stack` que seja **iter√°vel**, algo que a original n√£o √©. |
