# CPP_05 - Exce√ß√µes e Hierarquia de Classes em C++
### ‚úÖ **Objetivos Gerais do M√≥dulo CPP05**

* Praticar o uso de **exce√ß√µes em C++** (`try/catch`, `throw`, classes de exce√ß√£o personalizadas).
* Entender e aplicar **encapsulamento**, **heran√ßa**, **classes abstratas**, e **polimorfismo**.
* Aprender a estruturar classes usando a **Orthodox Canonical Form**.
* Exercitar a **sobrecarga de operadores** (`<<`).
* Trabalhar com **heran√ßa m√∫ltipla indireta** e **f√°bricas de objetos (Factory Pattern)**.
* Criar c√≥digo **robusto, reutiliz√°vel e test√°vel**.

---

## üß© **Resumo das Atividades**

### üìå **Exercise 00 ‚Äì ‚ÄúMommy, when I grow up, I want to be a bureaucrat!‚Äù**

**Objetivo:** Criar uma classe `Bureaucrat`.

**Aprendizados:**

* Definir atributos constantes e valid√°-los.
* Lan√ßar exce√ß√µes (`GradeTooHighException` e `GradeTooLowException`) ao criar ou alterar objetos com 
	valores inv√°lidos.
* Criar m√©todos `incrementGrade()` e `decrementGrade()` com verifica√ß√£o de limites.
* Implementar `<<` para impress√£o com formato customizado.

---

### üìå **Exercise 01 ‚Äì ‚ÄúForm up, maggots!‚Äù**

**Objetivo:** Criar a classe `Form` que interage com `Bureaucrat`.

**Aprendizados:**

* Trabalhar com **depend√™ncia entre classes**.
* Verificar permiss√µes de acordo com o grau do burocrata.
* Criar o m√©todo `beSigned()` com tratamento de exce√ß√£o caso o grau seja insuficiente.
* Implementar l√≥gica de `Bureaucrat::signForm()` com feedback de sucesso ou erro.

---

### üìå **Exercise 02 ‚Äì ‚ÄúNo, you need form 28B, not 28C...‚Äù**

**Objetivo:** Criar uma **classe base abstrata** `AForm` e classes concretas que herdam dela.

**Aprendizados:**

* Introdu√ß√£o ao **polimorfismo e classes abstratas** com m√©todos virtuais puros.
* Cria√ß√£o de tr√™s subclasses com a√ß√µes espec√≠ficas:

  * `ShrubberyCreationForm`: escreve √°rvores ASCII em um arquivo.
  * `RobotomyRequestForm`: faz opera√ß√£o com 50% de chance de sucesso.
  * `PresidentialPardonForm`: imprime uma mensagem de perd√£o.
* Implementar m√©todo `execute()` e validar se o formul√°rio est√° assinado e autorizado.
* Estender a classe `Bureaucrat` com `executeForm()`.

---

### üìå **Exercise 03 ‚Äì ‚ÄúAt least this beats coffee-making‚Äù**

**Objetivo:** Criar a classe `Intern`, que gera formul√°rios a partir de strings.

**Aprendizados:**

* **Factory Pattern (padr√£o de projeto)**: cria√ß√£o de objetos com base em strings de entrada.
* Evitar estruturas longas de `if/else` ‚Äî buscar solu√ß√µes mais elegantes (como arrays de ponteiros 
	para fun√ß√µes, mapeamento, etc.).
* Testar a fun√ß√£o `makeForm()` que retorna ponteiros para diferentes tipos de `AForm`.

---

## üéØ **Conclus√£o: Compet√™ncias Desenvolvidas**

* Entendimento s√≥lido do uso de **exce√ß√µes** em C++.
* Cria√ß√£o de **hierarquias de classes com heran√ßa**.
* Compreens√£o de **classe abstrata e polimorfismo**.
* Uso pr√°tico de **boas pr√°ticas de encapsulamento** e **organiza√ß√£o de c√≥digo**.
* Introdu√ß√£o a **padr√µes de projeto**, como **Factory Method**.

Se quiser, posso montar um *esqueleto* b√°sico das classes ou diagramas de heran√ßa para te ajudar a 
come√ßar. Deseja isso?
